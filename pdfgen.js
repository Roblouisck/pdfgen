var Handlebars = require('handlebars');
var pdf = require('html-pdf');
var fs = require('fs');

class htmlToPdf {
    constructor() {
        this.options = {
            format: "A3",
            orientation: "landscape",
            border: "10mm",
            "footer": {
                "height": "28mm",
                "contents": {
                    first: 'Cover page',
                    2: 'Second page', // Any page number is working. 1-based index
                    default: '<span style="color: #444;">{{page}}</span>/<span>{{pages}}</span>', // fallback value
                    last: 'Last Page'
                }
            }
        }
        Handlebars.registerHelper("oddEven", function (index) {
            if (index % 2 !== 0) return true
        });
    }

    create_pdf_from_html(document) {
        return new Promise((resolve, reject) => {
            if (!document || !document.html || !document.data) {
                reject(new Error("Some, or all, options are missing."));
            }
            // Compiles a template
            var html = Handlebars.compile(document.html)(document.data);
            var pdfPromise = pdf.create(html, this.options);

            // Create PDF from html template generated by handlebars
            // Output will be PDF file
            pdfPromise.toFile(document.path, (err, res) => {
                if (!err)
                    resolve(res);
                else
                    reject(err);
            });
        });
    }

    groupGuestsToTables(guests, tableNames) {
        const output = tableNames.map((table) => {
            const tableGuests = guests.map((guest) => {
                if (guest.table.name.includes(table)) return guest
            })
            return {
                [table]: tableGuests
            }
        })
        return output.map((tables, index) => {
            return tables[tableNames[index]].filter(Boolean)
        })
    }

    // Read HTML Template
    file_to_base64(file) {
        return new Promise((resolve, reject) => {
            fs.readFile(file, (err, data) => {
                if (err) {
                    reject(err)
                } else {
                    resolve(data.toString('base64'))
                }
            });
        })
    }
}

module.exports = htmlToPdf